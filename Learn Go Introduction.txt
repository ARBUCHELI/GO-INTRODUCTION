# LEARN GO: INTRODUCTION
------------------------

* From the Get Go
-----------------
	Go, or Golang, is a language that was developed by Google for in-house software development, to make their software easier to write, maintain and build.

	Go has quickly become very popular in the world of development, often used for writing APIs and DevOps tools. Go sits in the middle between low-level languages and high-level 
	languages, often offering the advantages of both.

	Go:

		. Uses a similar syntax to many other languages, including ‘C’.

		. Produces code that runs fast and uses very little memory.

		. Run across many platforms.

		. Provides simple syntax for multi-threaded programs.

		. Provides some object-oriented features.

		. Has garbage collection.

	Before we can make full use of Go, we first have to learn how to read and run a Go program. Once you’ve finished the entire lesson, read our guide for developing Go locally to 
	compile and run Go programs on your own computer!

	Notes:
	------
	It was necessary to run the following command, in order to be able to create the first testing program:
		$ go mod init hello --> Where hello is the name of the folder that contains the code.

	Until now it seems that the go commands won't run using git bash.  It would be necessary to use cmd.

==================================================================================================================================================================

* Compiling Files
-----------------
	Now we know what Go is for, let’s learn how to use the Go Compiler to compile a file into an executable.

	In our terminal, we type in go build followed by the name of our file and press Enter. If we wanted to run a file called greet.go, the command will look like:

		go build greet.go

	While nothing obvious is shown after we run our command, Go has created our program’s executable file. If we type in the command ls, we’ll see our original Go program and its 
	executable file.

		ls
		greet     greet.go

	To execute the file, we call:

		./greet

	Now let’s go one step further and actually do it!

==================================================================================================================================================================
























