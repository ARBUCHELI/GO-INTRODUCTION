# LEARN GO: INTRODUCTION
------------------------

* From the Get Go
-----------------
	Go, or Golang, is a language that was developed by Google for in-house software development, to make their software easier to write, maintain and build.

	Go has quickly become very popular in the world of development, often used for writing APIs and DevOps tools. Go sits in the middle between low-level languages and high-level 
	languages, often offering the advantages of both.

	Go:

		. Uses a similar syntax to many other languages, including ‘C’.

		. Produces code that runs fast and uses very little memory.

		. Run across many platforms.

		. Provides simple syntax for multi-threaded programs.

		. Provides some object-oriented features.

		. Has garbage collection.

	Before we can make full use of Go, we first have to learn how to read and run a Go program. Once you’ve finished the entire lesson, read our guide for developing Go locally to 
	compile and run Go programs on your own computer!

	Notes:
	------
	It was necessary to run the following command, in order to be able to create the first testing program:
		$ go mod init hello --> Where hello is the name of the folder that contains the code.

	Until now it seems that the go commands won't run using git bash.  It would be necessary to use cmd.

==================================================================================================================================================================

* Compiling Files
-----------------
	Now we know what Go is for, let’s learn how to use the Go Compiler to compile a file into an executable.

	In our terminal, we type in go build followed by the name of our file and press Enter. If we wanted to run a file called greet.go, the command will look like:

		go build greet.go

	While nothing obvious is shown after we run our command, Go has created our program’s executable file. If we type in the command ls, we’ll see our original Go program and its 
	executable file.

		ls
		greet     greet.go

	To execute the file, we call:

		./greet

	Now let’s go one step further and actually do it!

main.go
-------
package main

import "fmt"

func main() {
	fmt.Println("Hello World")
}

==================================================================================================================================================================

* Running Files
---------------
	Great, we were able to use the Go compiler to build an executable. We can run that executable as many times as we want.

	But what happens if we ever wanted to change our program? We would have to compile another executable file and then run that file. Imagine having to do that every single time!

	Thankfully, we have the go run command followed by the name of the Go file. We can use the go run command like so:

		go run greet.go

	The go run command compiles the code (like go build) and executes it. Unlike go build, go run will NOT create an executable file in our current folder.

main.go
-------
package main

import "fmt"

func main() {
	fmt.Println("Hello World")
}


==================================================================================================================================================================

* Our Program So Far: Packages
------------------------------
	Now that we understand how to compile and run Go programs, let’s take a look at Go packages.
	
	Projects can contain many .go files, organized into packages. Each package is like a directory: .go files to do with one part of your program can go in one package, other .go 
	files to do with something else can go into another package. If we were writing a calculator program, we could put the files for the calculation in package calc and the files for 
	input & output in package io.

	Our Program So Far
	------------------
	package main 
 
	import "fmt" 
 
	func main () {
  		fmt.Println("Hello World") 
	}

	Package Declaration
	-------------------
	Let’s focus on the first line package main. This line is called a package declaration and it tells the Go compiler to which package this ‘.go’ file belongs. If this package 
	declaration is ‘package main’, then this program will be compiled into an executable.

	Whitespace
	----------
	Next is a blank line. Go generally ignores these blank lines, they’re considered whitespace (new lines, spaces, and tabs). While our program doesn’t need the line break, it makes 
	our code easier to read.

	Import Statement
	----------------
	Then we have an import statement, import "fmt". The import keyword allows us to use code from other packages, in this case the Println function from the fmt package. Note how the 
	package name is enclosed with double quotes ".

	Now that we know how we declare & use Go packages, let’s discuss functions.

==================================================================================================================================================================























